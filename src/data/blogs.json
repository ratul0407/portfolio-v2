[
  {
    "id": 1,
    "title": "Mastering the Basics of Framer Motion for React Animations",
    "slug": "basic-framer-motion",
    "readTime": "5 min",
    "date": "2025-09-01",
    "summary": "Discover how to create stunning animations in React using Framer Motion, from simple fades to interactive gestures, with practical examples.",
    "sections": [
      {
        "subtitle": "Introduction to Framer Motion",
        "content": "Framer Motion is a powerful, open-source animation library for React that simplifies creating smooth, interactive animations. Whether you're animating page transitions or adding hover effects, Framer Motion's declarative syntax makes it accessible for beginners and powerful for advanced developers. Its seamless integration with React and TypeScript makes it ideal for modern web applications like portfolios.\n\nWhy Framer Motion?\n- Declarative: Define animations with props like initial, animate, and exit.\n- Gestures: Easily add hover, tap, and drag interactions.\n- Performance: Optimized for smooth animations without heavy DOM manipulation.\n\n[Image Placeholder: Screenshot of a Framer Motion-animated card fading in and sliding up]"
      },
      {
        "subtitle": "Getting Started with Framer Motion",
        "content": "To use Framer Motion, first install it in your React project:\n\n```bash\nnpm install framer-motion\n```\n\nThen, import the `motion` component to animate HTML or React elements. Replace standard elements like `div` with `motion.div` to enable animation props. For TypeScript users, Framer Motion includes type definitions out of the box.\n\nExample setup:\n\n```tsx\n// src/components/AnimatedCard.tsx\nimport { motion } from 'framer-motion';\n\nexport default function AnimatedCard() {\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 50 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.6 }}\n      className=\"bg-white p-6 rounded-lg shadow-lg max-w-sm mx-auto\"\n    >\n      <h2 className=\"text-xl font-bold\">Animated Card</h2>\n      <p>This card fades in and slides up!</p>\n    </motion.div>\n  );\n}\n```\n\nAdd it to your app:\n\n```tsx\n// src/App.tsx\nimport AnimatedCard from './components/AnimatedCard';\n\nfunction App() {\n  return (\n    <div className=\"min-h-screen bg-black flex items-center justify-center\">\n      <AnimatedCard />\n    </div>\n  );\n}\n```\n\n[Image Placeholder: Terminal screenshot showing npm install framer-motion]"
      },
      {
        "subtitle": "Basic Animation Example",
        "content": "Framer Motion makes animations intuitive with props like `initial`, `animate`, and `transition`. Here's a button with hover and tap animations:\n\n```tsx\n// src/components/AnimatedButton.tsx\nimport { motion } from 'framer-motion';\n\nexport default function AnimatedButton() {\n  return (\n    <motion.button\n      whileHover={{ scale: 1.1 }}\n      whileTap={{ scale: 0.9 }}\n      transition={{ type: 'spring', stiffness: 300 }}\n      className=\"bg-blue-500 text-white px-4 py-2 rounded\"\n    >\n      Click Me!\n    </motion.button>\n  );\n}\n```\n\nKey Props:\n- `initial`: Starting state (e.g., opacity: 0).\n- `animate`: Target state (e.g., opacity: 1).\n- `whileHover`/`whileTap`: Gesture-based animations.\n- `transition`: Controls timing and easing (e.g., type: 'spring').\n\nAdd this button to your portfolio's home page for an interactive touch. Test on mobile to ensure gesture compatibility.\n\n[Image Placeholder: GIF of the button scaling on hover and tap]"
      }
    ]
  },
  {
    "id": 2,
    "title": "Setting Up React Router for Seamless Navigation in Your React App",
    "slug": "setup-react-router",
    "readTime": "6 min",
    "date": "2025-08-28",
    "summary": "Learn how to set up React Router in your React project to enable client-side routing with smooth navigation and dynamic routes.",
    "sections": [
      {
        "subtitle": "Installing React Router",
        "content": "React Router is the standard library for routing in React applications, enabling navigation without full page reloads. To get started, install it:\n\n```bash\nnpm install react-router-dom\n```\n\nFor TypeScript projects, install type definitions:\n\n```bash\nnpm install --save-dev @types/react-router-dom\n```\n\nThis ensures type safety when defining routes and components. React Router v6 is recommended for modern apps due to its simplified API and improved performance.\n\n[Image Placeholder: Terminal screenshot showing npm install react-router-dom]"
      },
      {
        "subtitle": "Basic Setup with BrowserRouter",
        "content": "Wrap your app in `BrowserRouter` to enable routing, then define routes using `Routes` and `Route` components. Here's an example:\n\n```tsx\n// src/main.tsx\nimport { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\n\ncreateRoot(document.getElementById('root')!).render(\n  <StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </StrictMode>\n);\n```\n\nIn your `App.tsx`, define routes:\n\n```tsx\n// src/App.tsx\nimport { Routes, Route } from 'react-router-dom';\nimport Home from './components/Home';\nimport ProjectDetails from './components/ProjectDetails';\n\nfunction App() {\n  return (\n    <Routes>\n      <Route path=\"/\" element={<Home />} />\n      <Route path=\"/projects/:id\" element={<ProjectDetails />} />\n    </Routes>\n  );\n}\n\nexport default App;\n```\n\nThis sets up a home page (`/`) and a dynamic route for project details (`/projects/:id`).\n\n[Image Placeholder: Screenshot of a React app with multiple routes]"
      },
      {
        "subtitle": "Navigating Between Pages",
        "content": "Use the `Link` or `NavLink` component to navigate between routes without refreshing the page. `NavLink` adds styling for active routes:\n\n```tsx\n// src/components/Navbar.tsx\nimport { NavLink } from 'react-router-dom';\n\nexport default function Navbar() {\n  return (\n    <nav className=\"text-white flex space-x-4\">\n      <NavLink to=\"/\" className={({ isActive }) => (isActive ? 'font-bold' : '')}>\n        Home\n      </NavLink>\n      <NavLink to=\"/projects/1\" className={({ isActive }) => (isActive ? 'font-bold' : '')}>\n        Project Details\n      </NavLink>\n    </nav>\n  );\n}\n```\n\nFor dynamic routes, use `useParams` to access route parameters:\n\n```tsx\n// src/components/ProjectDetails.tsx\nimport { useParams } from 'react-router-dom';\n\nexport default function ProjectDetails() {\n  const { id } = useParams();\n  return (\n    <div className=\"min-h-screen text-white\">\n      <h1>Project Details for ID: {id}</h1>\n    </div>\n  );\n}\n```\n\nAdd `Navbar` to your app to enable navigation. Combine with Framer Motion for animated transitions, as shown in my portfolio.\n\n[Image Placeholder: GIF showing navigation between routes with a highlight on active links]"
      }
    ]
  },
  {
    "id": 3,
    "title": "Understanding JavaScript Promises for Asynchronous Programming",
    "slug": "javascript-promises",
    "readTime": "7 min",
    "date": "2025-08-25",
    "summary": "Dive into JavaScript Promises to master asynchronous operations, from creating promises to handling errors and chaining operations.",
    "sections": [
      {
        "subtitle": "What is a Promise?",
        "content": "A JavaScript Promise represents the eventual completion (or failure) of an asynchronous operation, such as fetching data or reading files. It has three states: pending, fulfilled, or rejected. Promises simplify asynchronous code compared to callbacks, making it more readable and maintainable.\n\nExample Use Case: Fetching data from an API:\n\n```javascript\nfetch('[https://api.example.com/data](https://api.example.com/data)')\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error('Error:', error));\n```\n\nPromises are widely used in modern JavaScript and React for tasks like API calls, timers, or animations.\n\n[Image Placeholder: Diagram of Promise states: pending, fulfilled, rejected]"
      },
      {
        "subtitle": "Creating a Promise",
        "content": "You can create a Promise using the `Promise` constructor, which takes a function with `resolve` and `reject` parameters:\n\n```javascript\nconst myPromise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    const success = true; // Simulate async operation\n    if (success) {\n      resolve('Operation successful!');\n    } else {\n      reject('Operation failed!');\n    }\n  }, 2000);\n});\n```\n\nThis creates a Promise that resolves or rejects after 2 seconds. Use it in your React app to handle asynchronous tasks, like loading data for your portfolio's project section.\n\n[Image Placeholder: Code editor screenshot showing Promise creation]"
      },
      {
        "subtitle": "Handling Promises",
        "content": "Use `.then()`, `.catch()`, and `.finally()` to handle Promise outcomes:\n\n```javascript\nmyPromise\n  .then(result => {\n    console.log(result); // 'Operation successful!'\n  })\n  .catch(error => {\n    console.error(error); // 'Operation failed!'\n  })\n  .finally(() => {\n    console.log('Promise completed');\n  });\n```\n\nFor cleaner syntax, use `async`/`await`:\n\n```javascript\nasync function handlePromise() {\n  try {\n    const result = await myPromise;\n    console.log(result);\n  } catch (error) {\n    console.error(error);\n  } finally {\n    console.log('Promise completed');\n  }\n}\n\nhandlePromise();\n```\n\nIn your portfolio, use Promises with `fetch` or `axios` to load project data dynamically, and handle errors gracefully to improve user experience.\n\n[Image Placeholder: Screenshot of a React component using async/await with Promises]"
      }
    ]
  }
]
